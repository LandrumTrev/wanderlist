{"ast":null,"code":"import _classCallCheck from \"/Users/richardltrevillianiii/Documents/homework/w21-Wanderlist/wanderlist/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/richardltrevillianiii/Documents/homework/w21-Wanderlist/wanderlist/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/richardltrevillianiii/Documents/homework/w21-Wanderlist/wanderlist/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/richardltrevillianiii/Documents/homework/w21-Wanderlist/wanderlist/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/richardltrevillianiii/Documents/homework/w21-Wanderlist/wanderlist/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/richardltrevillianiii/Documents/homework/w21-Wanderlist/wanderlist/client/src/pages/Home.js\";\n// Home page view Component called by React Router in the App.js Router Switch Routes\nimport React, { Component } from \"react\"; // use a <Link> tag in place of <a href> to link to another page view with React Router\n// import { Link } from \"react-router-dom\";\n// import API in order to make axios API calls to the Express Server\n// import API from \"../utils/API\";\n// import single-component .js files\n\nimport Header from \"../components/Header\"; // import DeleteBtn from \"../components/DeleteBtn\";\n// import Jumbotron from \"../components/Jumbotron\";\n// import multiple-component .js files\n\nimport { Col, Row, Container } from \"../components/Grid\"; // import { List, ListItem } from \"../components/List\";\n// import { Input, TextArea, FormBtn } from \"../components/Form\";\n\nvar Home =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Home, _Component);\n\n  function Home() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Home)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {// books: [],\n      // title: \"\",\n      // author: \"\",\n      // synopsis: \"\"\n    };\n\n    _this.loadBooks = function () {//   API.getBooks()\n      //     .then(res => this.setState({ books: res.data, title: \"\", author: \"\", synopsis: \"\" }))\n      //     .catch(err => console.log(err));\n    };\n\n    _this.deleteBook = function (id) {//   API.deleteBook(id)\n      //     .then(res => this.loadBooks())\n      //     .catch(err => console.log(err));\n    };\n\n    _this.handleInputChange = function (event) {// create variables name and value for event.target.name and event.target.value\n      // const { name, value } = event.target;\n      // use setState to change state values of the state key [name] for whichever property\n      // this.setState({\n      // [name]: value\n      // });\n    };\n\n    _this.handleFormSubmit = function (event) {// prevent page reload default behavior of \"submit\"\n      // event.preventDefault();\n      // as long as user entered a title and author (synopsis optional)\n      // if (this.state.title && this.state.author) {\n      // call client/src/utils/API.js to make API.saveBook(bookData) axios API call\n      // and send current this.state.title, .author, and .synopsis values\n      // as the req.body (bookData) of the axios API POST call to /api/books\n      // API.saveBook({\n      // title: this.state.title,\n      // author: this.state.author,\n      // synopsis: this.state.synopsis\n      // })\n      // after async operation complete, call loadBooks() to get updated book list\n      // .then(res => this.loadBooks())\n      // .catch(err => console.log(err));\n      // }\n    };\n\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"componentDidMount\",\n    // ===================================================\n    // whenever this page-view Component mounts (is called and displayed),\n    // run the loadBooks() method (below)\n    value: function componentDidMount() {} // this.loadBooks();\n    // ===================================================\n    // call client/src/utils/API.js to make API.getBooks() axios API route call\n    // loads all books data in the db into this.state.books\n    // and also clear all existing data in this.state.title, .author, and .synopsis\n\n  }, {\n    key: \"render\",\n    // ===================================================\n    value: function render() {\n      return (// Container component from Grid returns a Bootstrap \"container-fluid\"\n        React.createElement(Container, {\n          fluid: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, React.createElement(Header, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, React.createElement(Col, {\n          size: \"md-6\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: \"assets/images/dinofii_logo.svg\",\n          style: {\n            width: \"90%\"\n          },\n          alt: \"Dinofii logo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        })), React.createElement(Col, {\n          size: \"md-6\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          style: {\n            fontWeight: \"100\",\n            color: \"#444\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          style: {\n            fontWeight: \"700\",\n            color: \"rgb(121, 27, 27)\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, \"FIND NEW PLACES TO EXPLORE.\"), \" Select a feature and choose an area to search. Dinofii gives you a random point of interest and the closest city, as well as links to info, maps, directions, and local wifi.\")))))\n      );\n    }\n  }]);\n\n  return Home;\n}(Component);\n\nexport default Home;","map":{"version":3,"sources":["/Users/richardltrevillianiii/Documents/homework/w21-Wanderlist/wanderlist/client/src/pages/Home.js"],"names":["React","Component","Header","Col","Row","Container","Home","state","loadBooks","deleteBook","id","handleInputChange","event","handleFormSubmit","width","fontWeight","color"],"mappings":";;;;;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;AACA;AAEA;AACA;AAEA;;AACA,OAAOC,MAAP,MAAmB,sBAAnB,C,CAEA;AACA;AAEA;;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,QAAoC,oBAApC,C,CACA;AACA;;IAEMC,I;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ,CACN;AACA;AACA;AACA;AAJM,K;;UAqBRC,S,GAAY,YAAM,CAChB;AACA;AACA;AACD,K;;UAQDC,U,GAAa,UAAAC,EAAE,EAAI,CACjB;AACA;AACA;AACD,K;;UAKDC,iB,GAAoB,UAAAC,KAAK,EAAI,CAC3B;AACA;AACA;AACA;AACA;AACA;AACD,K;;UAKDC,gB,GAAmB,UAAAD,KAAK,EAAI,CAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,K;;;;;;;AAhED;AAEA;AACA;wCACoB,CAEnB,C,CADC;AAGF;AAEA;AACA;AACA;;;;AAsDA;6BAES;AACP,aACE;AACA,4BAAC,SAAD;AAAW,UAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,GAAD;AAAK,UAAA,IAAI,EAAC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,GAAG,EAAC,gCAAT;AAA0C,UAAA,KAAK,EAAE;AAAEE,YAAAA,KAAK,EAAE;AAAT,WAAjD;AAAmE,UAAA,GAAG,EAAC,cAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF,EAIE,oBAAC,GAAD;AAAK,UAAA,IAAI,EAAC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,KAAK,EAAE;AAAEC,YAAAA,UAAU,EAAE,KAAd;AAAqBC,YAAAA,KAAK,EAAE;AAA5B,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAM,UAAA,KAAK,EAAE;AAAED,YAAAA,UAAU,EAAE,KAAd;AAAqBC,YAAAA,KAAK,EAAE;AAA5B,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADF,mLADF,CAJF,CADF,CADF;AAFF;AA0GD;;;;EAxLgBf,S;;AA2LnB,eAAeK,IAAf","sourcesContent":["// Home page view Component called by React Router in the App.js Router Switch Routes\n\nimport React, { Component } from \"react\";\n// use a <Link> tag in place of <a href> to link to another page view with React Router\n// import { Link } from \"react-router-dom\";\n\n// import API in order to make axios API calls to the Express Server\n// import API from \"../utils/API\";\n\n// import single-component .js files\nimport Header from \"../components/Header\";\n\n// import DeleteBtn from \"../components/DeleteBtn\";\n// import Jumbotron from \"../components/Jumbotron\";\n\n// import multiple-component .js files\nimport { Col, Row, Container } from \"../components/Grid\";\n// import { List, ListItem } from \"../components/List\";\n// import { Input, TextArea, FormBtn } from \"../components/Form\";\n\nclass Home extends Component {\n  // variable data held and managed by Home component\n  state = {\n    // books: [],\n    // title: \"\",\n    // author: \"\",\n    // synopsis: \"\"\n  };\n\n  // ===================================================\n\n  // whenever this page-view Component mounts (is called and displayed),\n  // run the loadBooks() method (below)\n  componentDidMount() {\n    // this.loadBooks();\n  }\n\n  // ===================================================\n\n  // call client/src/utils/API.js to make API.getBooks() axios API route call\n  // loads all books data in the db into this.state.books\n  // and also clear all existing data in this.state.title, .author, and .synopsis\n\n  loadBooks = () => {\n    //   API.getBooks()\n    //     .then(res => this.setState({ books: res.data, title: \"\", author: \"\", synopsis: \"\" }))\n    //     .catch(err => console.log(err));\n  };\n\n  // ===================================================\n\n  // when this.deleteBook(id) is called,\n  // call client/src/utils/API.js to make API.deleteBook(id) axios API route call\n  // and then call this.loadBooks() above to refresh all book data in state\n\n  deleteBook = id => {\n    //   API.deleteBook(id)\n    //     .then(res => this.loadBooks())\n    //     .catch(err => console.log(err));\n  };\n\n  // ===================================================\n\n  // send live typed input data to this.state.title, .author, .synopsis on each keystroke\n  handleInputChange = event => {\n    // create variables name and value for event.target.name and event.target.value\n    // const { name, value } = event.target;\n    // use setState to change state values of the state key [name] for whichever property\n    // this.setState({\n    // [name]: value\n    // });\n  };\n\n  // ===================================================\n\n  // when user hits the submit button to add a new book,\n  handleFormSubmit = event => {\n    // prevent page reload default behavior of \"submit\"\n    // event.preventDefault();\n    // as long as user entered a title and author (synopsis optional)\n    // if (this.state.title && this.state.author) {\n    // call client/src/utils/API.js to make API.saveBook(bookData) axios API call\n    // and send current this.state.title, .author, and .synopsis values\n    // as the req.body (bookData) of the axios API POST call to /api/books\n    // API.saveBook({\n    // title: this.state.title,\n    // author: this.state.author,\n    // synopsis: this.state.synopsis\n    // })\n    // after async operation complete, call loadBooks() to get updated book list\n    // .then(res => this.loadBooks())\n    // .catch(err => console.log(err));\n    // }\n  };\n\n  // ===================================================\n\n  render() {\n    return (\n      // Container component from Grid returns a Bootstrap \"container-fluid\"\n      <Container fluid>\n        <Header>\n          <Row>\n            <Col size=\"md-6\">\n              <img src=\"assets/images/dinofii_logo.svg\" style={{ width: \"90%\" }} alt=\"Dinofii logo\" />\n            </Col>\n            <Col size=\"md-6\">\n              <div style={{ fontWeight: \"100\", color: \"#444\" }}>\n                <span style={{ fontWeight: \"700\", color: \"rgb(121, 27, 27)\" }}>FIND NEW PLACES TO EXPLORE.</span> Select a feature and choose an area\n                to search. Dinofii gives you a random point of interest and the closest city, as well as links to info, maps, directions, and local\n                wifi.\n              </div>\n            </Col>\n          </Row>\n        </Header>\n        {/* Row returns a Bootstrap \"row\" */}\n        {/* <Row> */}\n\n        {/* Col returns a Bootstrap \"col-md-6\" */}\n        {/* <Col size=\"md-6\"> */}\n\n        {/* returns a Bootstrap \"jumbotron\" with inline CSS */}\n        {/* <Jumbotron> */}\n        {/* <h1>What Books Should I Read?</h1> */}\n        {/* </Jumbotron> */}\n\n        {/* HTML <form> tag: input for adding a new book */}\n        {/* <form> */}\n        {/* Bootstrap \"form-group\" <div> and \"form-control\" <input> with ...props */}\n        {/* <Input  */}\n        {/* // insert this.state.title data as the value of the input field */}\n        {/* value={this.state.title}  */}\n        {/* // on every char typed, make field value the value of this.state.title */}\n        {/* onChange={this.handleInputChange}  */}\n        {/* // name used by this.handleInputChange to change this.state.title */}\n        {/* name=\"title\"  */}\n        {/* // displayed field text when no value exists */}\n        {/* placeholder=\"Title (required)\"  */}\n        {/* /> */}\n        {/* <Input  */}\n        {/* value={this.state.author}  */}\n        {/* onChange={this.handleInputChange}  */}\n        {/* name=\"author\"  */}\n        {/* placeholder=\"Author (required)\"  */}\n        {/* /> */}\n        {/* uses <textarea> instead of <input>, sizes input field to 20 rows deep */}\n        {/* <TextArea  */}\n        {/* value={this.state.synopsis}  */}\n        {/* onChange={this.handleInputChange}  */}\n        {/* name=\"synopsis\"  */}\n        {/* placeholder=\"Synopsis (Optional)\"  */}\n        {/* /> */}\n        {/* <button> with Bootstrap classes, inline CSS, props, and children */}\n        {/* <FormBtn  */}\n        {/* // button is disabled if no author AND title are entered */}\n        {/* disabled={!(this.state.author && this.state.title)}  */}\n        {/* // when button is clicked, handle the click with this.handleFormSubmit */}\n        {/* onClick={this.handleFormSubmit} */}\n        {/* > */}\n        {/* Submit Book */}\n        {/* </FormBtn> */}\n        {/* </form> */}\n\n        {/* </Col> */}\n\n        {/* <Col size=\"md-6 sm-12\"> */}\n        {/* <Jumbotron> */}\n        {/* <h1>Books On My List</h1> */}\n        {/* </Jumbotron> */}\n\n        {/* if there are books in this.state.books (if TRUE (exists)), then */}\n        {/* {this.state.books.length ? ( */}\n        {/* // create a List component container (styled <div> holding \"list-group\" <ul>) */}\n        {/* <List> */}\n        {/* array.map() all books in this.state.books */}\n        {/* {this.state.books.map(book => ( */}\n        {/* // where every book object gets a ListItem component with a key for React */}\n        {/* // an <li> with Bootstrap \"list-group-item\" */}\n        {/* <ListItem key={book._id}> */}\n        {/* <li> contains a Link (React Router) to it's own book page */}\n        {/* App.js (React Router) sends this route to Detail.js page view */}\n        {/* <Link to={\"/books/\" + book._id}> */}\n        {/* <strong> */}\n        {/* Link surrounds the displayed title and author */}\n        {/* {book.title} by {book.author} */}\n        {/* </strong> */}\n        {/* </Link> */}\n        {/* ListItem also contains DeleteBtn with click handler */}\n        {/* returns a <button> with other non-individual properties */}\n        {/* <DeleteBtn onClick={() => this.deleteBook(book._id)} /> */}\n        {/* </ListItem> */}\n        {/* ))} */}\n        {/* </List> */}\n        {/* ) : ( */}\n        {/* // otherwise, if this.state.books does not have a length (no data), then */}\n        {/* // don't create the <List> component, just create this <h3>: */}\n        {/* <h3>No Results to Display</h3> */}\n        {/* )} */}\n\n        {/* </Col> */}\n\n        {/* </Row> */}\n      </Container>\n    );\n  }\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}