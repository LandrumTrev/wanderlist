{"ast":null,"code":"import _defineProperty from \"/Users/richardltrevillianiii/Documents/homework/w21-Wanderlist/wanderlist/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/richardltrevillianiii/Documents/homework/w21-Wanderlist/wanderlist/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/richardltrevillianiii/Documents/homework/w21-Wanderlist/wanderlist/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/richardltrevillianiii/Documents/homework/w21-Wanderlist/wanderlist/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/richardltrevillianiii/Documents/homework/w21-Wanderlist/wanderlist/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/richardltrevillianiii/Documents/homework/w21-Wanderlist/wanderlist/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/richardltrevillianiii/Documents/homework/w21-Wanderlist/wanderlist/client/src/pages/Books.js\";\n// page view Component called by React Router in the App.js Router Switch Routes\nimport React, { Component } from \"react\"; // use a <Link> tag in place of <a href> to link to another page view with React Router\n\nimport { Link } from \"react-router-dom\"; // import API in order to make axios API calls to the Express Server\n\nimport API from \"../utils/API\"; // import single-component .js files\n\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\"; // import multiple-component .js files\n\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nvar Books =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Books, _Component);\n\n  function Books() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Books);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Books)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      books: [],\n      title: \"\",\n      author: \"\",\n      synopsis: \"\"\n    };\n\n    _this.loadBooks = function () {\n      API.getBooks().then(function (res) {\n        return _this.setState({\n          books: res.data,\n          title: \"\",\n          author: \"\",\n          synopsis: \"\"\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.deleteBook = function (id) {\n      API.deleteBook(id).then(function (res) {\n        return _this.loadBooks();\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.handleInputChange = function (event) {\n      // create variables name and value for event.target.name and event.target.value\n      var _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value; // use setState to change state values of the state key [name] for whichever property\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.handleFormSubmit = function (event) {\n      // prevent page reload default behavior of \"submit\"\n      event.preventDefault(); // as long as user entered a title and author (synopsis optional)\n\n      if (_this.state.title && _this.state.author) {\n        // call client/src/utils/API.js to make API.saveBook(bookData) axios API call\n        // and send current this.state.title, .author, and .synopsis values\n        // as the req.body (bookData) of the axios API POST call to /api/books\n        API.saveBook({\n          title: _this.state.title,\n          author: _this.state.author,\n          synopsis: _this.state.synopsis\n        }) // after async operation complete, call loadBooks() to get updated book list\n        .then(function (res) {\n          return _this.loadBooks();\n        }).catch(function (err) {\n          return console.log(err);\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Books, [{\n    key: \"componentDidMount\",\n    // whenever this page-view Component mounts (is called and displayed),\n    // run the loadBooks() method (below)\n    value: function componentDidMount() {\n      this.loadBooks();\n    } // call client/src/utils/API.js to make API.getBooks() axios API route call\n    // loads all books data in the db into this.state.books\n    // and also clear all existing data in this.state.title, .author, and .synopsis\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return (// Container component from Grid returns a Bootstrap \"container-fluid\"\n        React.createElement(Container, {\n          fluid: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, React.createElement(Col, {\n          size: \"md-6\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, React.createElement(Jumbotron, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, \"What Books Should I Read?\")), React.createElement(\"form\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, React.createElement(Input // insert this.state.title data as the value of the input field\n        , {\n          value: this.state.title // on every char typed, make field value the value of this.state.title\n          ,\n          onChange: this.handleInputChange // name used by this.handleInputChange to change this.state.title\n          ,\n          name: \"title\" // displayed field text when no value exists\n          ,\n          placeholder: \"Title (required)\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }), React.createElement(Input, {\n          value: this.state.author,\n          onChange: this.handleInputChange,\n          name: \"author\",\n          placeholder: \"Author (required)\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }), React.createElement(TextArea, {\n          value: this.state.synopsis,\n          onChange: this.handleInputChange,\n          name: \"synopsis\",\n          placeholder: \"Synopsis (Optional)\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }), React.createElement(FormBtn // button is disabled if no author AND title are entered\n        , {\n          disabled: !(this.state.author && this.state.title) // when button is clicked, handle the click with this.handleFormSubmit\n          ,\n          onClick: this.handleFormSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, \"Submit Book\"))), React.createElement(Col, {\n          size: \"md-6 sm-12\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, React.createElement(Jumbotron, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, \"Books On My List\")), this.state.books.length ? // create a List component container (styled <div> holding \"list-group\" <ul>)\n        React.createElement(List, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, this.state.books.map(function (book) {\n          return (// where every book object gets a ListItem component with a key for React\n            // an <li> with Bootstrap \"list-group-item\"\n            React.createElement(ListItem, {\n              key: book._id,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 146\n              },\n              __self: this\n            }, React.createElement(Link, {\n              to: \"/books/\" + book._id,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 149\n              },\n              __self: this\n            }, React.createElement(\"strong\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 150\n              },\n              __self: this\n            }, book.title, \" by \", book.author)), React.createElement(DeleteBtn, {\n              onClick: function onClick() {\n                return _this2.deleteBook(book._id);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 157\n              },\n              __self: this\n            }))\n          );\n        })) : // otherwise, if this.state.books does not have a length (no data), then\n        // don't create the <List> component, just create this <h3>:\n        React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }, \"No Results to Display\"))))\n      );\n    }\n  }]);\n\n  return Books;\n}(Component);\n\nexport default Books;","map":{"version":3,"sources":["/Users/richardltrevillianiii/Documents/homework/w21-Wanderlist/wanderlist/client/src/pages/Books.js"],"names":["React","Component","Link","API","DeleteBtn","Jumbotron","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","Books","state","books","title","author","synopsis","loadBooks","getBooks","then","res","setState","data","catch","err","console","log","deleteBook","id","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","saveBook","length","map","book","_id"],"mappings":";;;;;;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,SAASC,IAAT,QAAqB,kBAArB,C,CAEA;;AACA,OAAOC,GAAP,MAAgB,cAAhB,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB,C,CACA;;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,QAAoC,oBAApC;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,oBAA/B;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,oBAAzC;;IAEMC,K;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,KAAK,EAAE,EAFD;AAGNC,MAAAA,MAAM,EAAE,EAHF;AAINC,MAAAA,QAAQ,EAAE;AAJJ,K;;UAgBRC,S,GAAY,YAAM;AAChBjB,MAAAA,GAAG,CAACkB,QAAJ,GACGC,IADH,CACQ,UAAAC,GAAG;AAAA,eAAI,MAAKC,QAAL,CAAc;AAAER,UAAAA,KAAK,EAAEO,GAAG,CAACE,IAAb;AAAmBR,UAAAA,KAAK,EAAE,EAA1B;AAA8BC,UAAAA,MAAM,EAAE,EAAtC;AAA0CC,UAAAA,QAAQ,EAAE;AAApD,SAAd,CAAJ;AAAA,OADX,EAEGO,KAFH,CAES,UAAAC,GAAG;AAAA,eAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,OAFZ;AAGD,K;;UAKDG,U,GAAa,UAAAC,EAAE,EAAI;AACjB5B,MAAAA,GAAG,CAAC2B,UAAJ,CAAeC,EAAf,EACGT,IADH,CACQ,UAAAC,GAAG;AAAA,eAAI,MAAKH,SAAL,EAAJ;AAAA,OADX,EAEGM,KAFH,CAES,UAAAC,GAAG;AAAA,eAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,OAFZ;AAGD,K;;UAGDK,iB,GAAoB,UAAAC,KAAK,EAAI;AAC3B;AAD2B,0BAEHA,KAAK,CAACC,MAFH;AAAA,UAEnBC,IAFmB,iBAEnBA,IAFmB;AAAA,UAEbC,KAFa,iBAEbA,KAFa,EAG3B;;AACA,YAAKZ,QAAL,qBACGW,IADH,EACUC,KADV;AAGD,K;;UAGDC,gB,GAAmB,UAAAJ,KAAK,EAAI;AAC1B;AACAA,MAAAA,KAAK,CAACK,cAAN,GAF0B,CAG1B;;AACA,UAAI,MAAKvB,KAAL,CAAWE,KAAX,IAAoB,MAAKF,KAAL,CAAWG,MAAnC,EAA2C;AACzC;AACA;AACA;AACAf,QAAAA,GAAG,CAACoC,QAAJ,CAAa;AACXtB,UAAAA,KAAK,EAAE,MAAKF,KAAL,CAAWE,KADP;AAEXC,UAAAA,MAAM,EAAE,MAAKH,KAAL,CAAWG,MAFR;AAGXC,UAAAA,QAAQ,EAAE,MAAKJ,KAAL,CAAWI;AAHV,SAAb,EAKA;AALA,SAMGG,IANH,CAMQ,UAAAC,GAAG;AAAA,iBAAI,MAAKH,SAAL,EAAJ;AAAA,SANX,EAOGM,KAPH,CAOS,UAAAC,GAAG;AAAA,iBAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,SAPZ;AAQD;AACF,K;;;;;;;AApDD;AACA;wCACoB;AAClB,WAAKP,SAAL;AACD,K,CAED;AACA;AACA;;;;6BA8CS;AAAA;;AACP,aACE;AACA,4BAAC,SAAD;AAAW,UAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEE,oBAAC,GAAD;AAAK,UAAA,IAAI,EAAC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADF,CAFF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEE,oBAAC,KAAD,CACE;AADF;AAEE,UAAA,KAAK,EAAE,KAAKL,KAAL,CAAWE,KAFpB,CAGE;AAHF;AAIE,UAAA,QAAQ,EAAE,KAAKe,iBAJjB,CAKE;AALF;AAME,UAAA,IAAI,EAAC,OANP,CAOE;AAPF;AAQE,UAAA,WAAW,EAAC,kBARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,EAYE,oBAAC,KAAD;AACE,UAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWG,MADpB;AAEE,UAAA,QAAQ,EAAE,KAAKc,iBAFjB;AAGE,UAAA,IAAI,EAAC,QAHP;AAIE,UAAA,WAAW,EAAC,mBAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAZF,EAmBE,oBAAC,QAAD;AACE,UAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWI,QADpB;AAEE,UAAA,QAAQ,EAAE,KAAKa,iBAFjB;AAGE,UAAA,IAAI,EAAC,UAHP;AAIE,UAAA,WAAW,EAAC,qBAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAnBF,EA0BE,oBAAC,OAAD,CACE;AADF;AAEE,UAAA,QAAQ,EAAE,EAAE,KAAKjB,KAAL,CAAWG,MAAX,IAAqB,KAAKH,KAAL,CAAWE,KAAlC,CAFZ,CAGE;AAHF;AAIE,UAAA,OAAO,EAAE,KAAKoB,gBAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBA1BF,CAPF,CAFF,EAgDE,oBAAC,GAAD;AAAK,UAAA,IAAI,EAAC,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,CADF,EAMG,KAAKtB,KAAL,CAAWC,KAAX,CAAiBwB,MAAjB,GACC;AACA,4BAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEG,KAAKzB,KAAL,CAAWC,KAAX,CAAiByB,GAAjB,CAAqB,UAAAC,IAAI;AAAA,iBACxB;AACA;AACA,gCAAC,QAAD;AAAU,cAAA,GAAG,EAAEA,IAAI,CAACC,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAGE,oBAAC,IAAD;AAAM,cAAA,EAAE,EAAE,YAAYD,IAAI,CAACC,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEGD,IAAI,CAACzB,KAFR,UAEmByB,IAAI,CAACxB,MAFxB,CADF,CAHF,EAWE,oBAAC,SAAD;AAAW,cAAA,OAAO,EAAE;AAAA,uBAAM,MAAI,CAACY,UAAL,CAAgBY,IAAI,CAACC,GAArB,CAAN;AAAA,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF;AAHwB;AAAA,SAAzB,CAFH,CAFD,GAuBC;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCA/BJ,CAhDF,CAFF;AAFF;AA0FD;;;;EAzJiB1C,S;;AA4JpB,eAAea,KAAf","sourcesContent":["// page view Component called by React Router in the App.js Router Switch Routes\n\nimport React, { Component } from \"react\";\n// use a <Link> tag in place of <a href> to link to another page view with React Router\nimport { Link } from \"react-router-dom\";\n\n// import API in order to make axios API calls to the Express Server\nimport API from \"../utils/API\";\n\n// import single-component .js files\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\n// import multiple-component .js files\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nclass Books extends Component {\n  state = {\n    books: [],\n    title: \"\",\n    author: \"\",\n    synopsis: \"\"\n  };\n\n  // whenever this page-view Component mounts (is called and displayed),\n  // run the loadBooks() method (below)\n  componentDidMount() {\n    this.loadBooks();\n  }\n\n  // call client/src/utils/API.js to make API.getBooks() axios API route call\n  // loads all books data in the db into this.state.books\n  // and also clear all existing data in this.state.title, .author, and .synopsis\n  loadBooks = () => {\n    API.getBooks()\n      .then(res => this.setState({ books: res.data, title: \"\", author: \"\", synopsis: \"\" }))\n      .catch(err => console.log(err));\n  };\n\n  // when this.deleteBook(id) is called,\n  // call client/src/utils/API.js to make API.deleteBook(id) axios API route call\n  // and then call this.loadBooks() above to refresh all book data in state\n  deleteBook = id => {\n    API.deleteBook(id)\n      .then(res => this.loadBooks())\n      .catch(err => console.log(err));\n  };\n\n  // send live typed input data to this.state.title, .author, .synopsis on each keystroke\n  handleInputChange = event => {\n    // create variables name and value for event.target.name and event.target.value\n    const { name, value } = event.target;\n    // use setState to change state values of the state key [name] for whichever property\n    this.setState({\n      [name]: value\n    });\n  };\n\n  // when user hits the submit button to add a new book,\n  handleFormSubmit = event => {\n    // prevent page reload default behavior of \"submit\"\n    event.preventDefault();\n    // as long as user entered a title and author (synopsis optional)\n    if (this.state.title && this.state.author) {\n      // call client/src/utils/API.js to make API.saveBook(bookData) axios API call\n      // and send current this.state.title, .author, and .synopsis values\n      // as the req.body (bookData) of the axios API POST call to /api/books\n      API.saveBook({\n        title: this.state.title,\n        author: this.state.author,\n        synopsis: this.state.synopsis\n      })\n      // after async operation complete, call loadBooks() to get updated book list\n        .then(res => this.loadBooks())\n        .catch(err => console.log(err));\n    }\n  };\n\n  render() {\n    return (\n      // Container component from Grid returns a Bootstrap \"container-fluid\"\n      <Container fluid>\n        {/* Row returns a Bootstrap \"row\" */}\n        <Row>\n          {/* Col returns a Bootstrap \"col-md-6\" */}\n          <Col size=\"md-6\">\n          {/* returns a Bootstrap \"jumbotron\" with inline CSS */}\n            <Jumbotron>\n              <h1>What Books Should I Read?</h1>\n            </Jumbotron>\n\n            {/* HTML <form> tag: input for adding a new book */}\n            <form>\n              {/* Bootstrap \"form-group\" <div> and \"form-control\" <input> with ...props */}\n              <Input \n                // insert this.state.title data as the value of the input field\n                value={this.state.title} \n                // on every char typed, make field value the value of this.state.title\n                onChange={this.handleInputChange} \n                // name used by this.handleInputChange to change this.state.title\n                name=\"title\" \n                // displayed field text when no value exists\n                placeholder=\"Title (required)\" \n              />\n              <Input \n                value={this.state.author} \n                onChange={this.handleInputChange} \n                name=\"author\" \n                placeholder=\"Author (required)\" \n              />\n              {/* uses <textarea> instead of <input>, sizes input field to 20 rows deep */}\n              <TextArea \n                value={this.state.synopsis} \n                onChange={this.handleInputChange} \n                name=\"synopsis\" \n                placeholder=\"Synopsis (Optional)\" \n              />\n              {/* <button> with Bootstrap classes, inline CSS, props, and children */}\n              <FormBtn \n                // button is disabled if no author AND title are entered\n                disabled={!(this.state.author && this.state.title)} \n                // when button is clicked, handle the click with this.handleFormSubmit\n                onClick={this.handleFormSubmit}\n              >\n                Submit Book\n              </FormBtn>\n            </form>\n\n          </Col>\n\n\n          <Col size=\"md-6 sm-12\">\n            <Jumbotron>\n              <h1>Books On My List</h1>\n            </Jumbotron>\n\n            {/* if there are books in this.state.books (if TRUE (exists)), then */}\n            {this.state.books.length ? (\n              // create a List component container (styled <div> holding \"list-group\" <ul>)\n              <List>\n                {/* array.map() all books in this.state.books */}\n                {this.state.books.map(book => (\n                  // where every book object gets a ListItem component with a key for React\n                  // an <li> with Bootstrap \"list-group-item\"\n                  <ListItem key={book._id}>\n                    {/* <li> contains a Link (React Router) to it's own book page */}\n                    {/* App.js (React Router) sends this route to Detail.js page view */}\n                    <Link to={\"/books/\" + book._id}>\n                      <strong>\n                        {/* Link surrounds the displayed title and author */}\n                        {book.title} by {book.author}\n                      </strong>\n                    </Link>\n                    {/* ListItem also contains DeleteBtn with click handler */}\n                    {/* returns a <button> with other non-individual properties */}\n                    <DeleteBtn onClick={() => this.deleteBook(book._id)} />\n                  </ListItem>\n                ))}\n              </List>\n            ) : (\n              // otherwise, if this.state.books does not have a length (no data), then\n              // don't create the <List> component, just create this <h3>:\n              <h3>No Results to Display</h3>\n            )}\n\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Books;\n"]},"metadata":{},"sourceType":"module"}